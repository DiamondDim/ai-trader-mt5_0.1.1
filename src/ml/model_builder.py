import joblib
import os
import pandas as pd
import numpy as np
from datetime import datetime
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import warnings

warnings.filterwarnings('ignore')


def train_model(symbol=None):
    """
    –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    """
    try:
        from src.utils.config import load_config
        from src.core.mt5_client import load_data
        from src.ml.feature_engineer import create_features

        config = load_config()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –∏–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if symbol:
            trading_symbol = symbol
        else:
            trading_symbol = config['trading']['symbol']

        print(f"üìä –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {trading_symbol}")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        data = load_data(
            symbol=trading_symbol,
            timeframe_str=config['data']['timeframe'],
            bars_count=config['data']['bars_count']
        )

        if data.empty:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {trading_symbol}")
            return False

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –±–∞—Ä–æ–≤")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø (—Å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
        features_df = create_features(data, for_training=True)

        if features_df.empty or features_df.isnull().all().all():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–ª–∏ –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ NaN")
            return False

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        # –ò–°–ö–õ–Æ–ß–ê–ï–ú future_close –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤!
        exclude_cols = ['target', 'future_close']
        X = features_df.drop(exclude_cols, axis=1)
        y = features_df['target']

        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN
        valid_indices = ~(X.isnull().any(axis=1) | y.isnull())
        X = X[valid_indices]
        y = y[valid_indices]

        if len(X) == 0:
            print("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ NaN")
            return False

        print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(X)}")
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {X.shape[1]}")
        print(f"‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏: {list(X.columns)}")

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42, shuffle=False
        )

        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        print("üéØ –û–±—É—á–µ–Ω–∏–µ GradientBoosting –º–æ–¥–µ–ª–∏...")
        model = GradientBoostingClassifier(
            n_estimators=100,
            learning_rate=0.1,
            max_depth=3,
            random_state=42
        )

        model.fit(X_train, y_train)

        # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)

        print(f"üìà –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy:.4f} ({accuracy * 100:.2f}%)")
        print("\nüìä –û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print(classification_report(y_test, y_pred))

        # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_importance = pd.DataFrame({
            'feature': X.columns,
            'importance': model.feature_importances_
        }).sort_values('importance', ascending=False)

        print("\nüîù –¢–æ–ø-10 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        print(feature_importance.head(10).to_string(index=False))

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É models –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs('models', exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –∏–º–µ–Ω–µ–º –≤–∫–ª—é—á–∞—é—â–∏–º —Å–∏–º–≤–æ–ª –∏ –¥–∞—Ç—É
        model_filename = f"model_{trading_symbol}_{datetime.now().strftime('%Y%m%d_%H%M')}.pkl"
        model_path = os.path.join('models', model_filename)

        joblib.dump(model, model_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–µ–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥
        config['model']['last_trained'] = datetime.now().isoformat()
        config['model']['current_model'] = model_path
        config['model']['symbol'] = trading_symbol
        config['model']['accuracy'] = float(accuracy)
        config['model']['features_count'] = int(X.shape[1])
        config['model']['training_samples'] = int(len(X))

        from src.utils.config import save_config
        save_config(config)

        print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_path}")
        print(f"üíæ –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {os.path.getsize(model_path) / 1024 / 1024:.2f} MB")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


def load_model_for_symbol(symbol):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    """
    try:
        models_dir = 'models'

        if not os.path.exists(models_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ {models_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return None

        # –ò—â–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: model_SYMBOL_YYYYMMDD_HHMM.pkl)
        model_files = [f for f in os.listdir(models_dir)
                       if f.startswith(f'model_{symbol}_') and f.endswith('.pkl')]

        if not model_files:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}")
            print(f"üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {[f for f in os.listdir(models_dir) if f.endswith('.pkl')]}")
            return None

        # –ë–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –º–æ–¥–µ–ª—å (–ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        latest_model = sorted(model_files, reverse=True)[0]
        model_path = os.path.join(models_dir, latest_model)

        model = joblib.load(model_path)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        from src.utils.config import load_config
        config = load_config()

        model_info = {
            'path': model_path,
            'symbol': symbol,
            'accuracy': config['model'].get('accuracy', 'N/A'),
            'features': config['model'].get('features_count', 'N/A'),
            'trained': config['model'].get('last_trained', 'N/A')
        }

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å: {latest_model}")
        print(f"   üìä –¢–æ—á–Ω–æ—Å—Ç—å: {model_info['accuracy']}")
        print(f"   üîß –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {model_info['features']}")
        print(f"   ‚è∞ –û–±—É—á–µ–Ω–∞: {model_info['trained'][:16]}")

        return model

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}: {e}")
        return None


def get_available_models():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞)
    """
    try:
        models_dir = 'models'
        if not os.path.exists(models_dir):
            return []

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: model_SYMBOL_YYYYMMDD_HHMM.pkl
        model_files = [f for f in os.listdir(models_dir)
                       if f.startswith('model_') and f.endswith('.pkl')
                       and len(f.split('_')) >= 3]  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∏–º–≤–æ–ª –∏ –¥–∞—Ç–∞

        models_info = []
        for model_file in model_files:
            try:
                # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                # –§–æ—Ä–º–∞—Ç: model_SYMBOL_YYYYMMDD_HHMM.pkl
                base_name = model_file.replace('.pkl', '')
                parts = base_name.split('_')

                if len(parts) >= 3:
                    symbol = parts[1]
                    date_str = parts[2]
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ date_str –ø–æ—Ö–æ–∂ –Ω–∞ –¥–∞—Ç—É (YYYYMMDD)
                    if len(date_str) == 8 and date_str.isdigit():
                        models_info.append({
                            'symbol': symbol,
                            'file': model_file,
                            'date': date_str,
                            'path': os.path.join(models_dir, model_file)
                        })
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ {model_file}: {e}")
                continue

        return sorted(models_info, key=lambda x: x['date'], reverse=True)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return []


def delete_old_models(symbol, keep_count=3):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö
    """
    try:
        models = get_available_models()
        symbol_models = [m for m in models if m['symbol'] == symbol]

        if len(symbol_models) <= keep_count:
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
        old_models = sorted(symbol_models, key=lambda x: x['date'])[:-keep_count]

        for old_model in old_models:
            try:
                os.remove(old_model['path'])
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å: {old_model['file']}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å {old_model['file']}: {e}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π: {e}")


def delete_model(model_path):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    """
    try:
        if os.path.exists(model_path):
            os.remove(model_path)
            print(f"‚úÖ –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞: {model_path}")
            return True
        else:
            print(f"‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return False
