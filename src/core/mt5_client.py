import MetaTrader5 as mt5
import pandas as pd
from datetime import datetime, timedelta
import time


def initialize_mt5():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5
    """
    if not mt5.initialize():
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MT5, –∫–æ–¥ –æ—à–∏–±–∫–∏:", mt5.last_error())
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    if not mt5.terminal_info():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É")
        return False

    print("‚úÖ MetaTrader5 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return True


def get_available_symbols():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –∏–∑ MT5
    """
    try:
        symbols = mt5.symbols_get()
        symbol_names = [s.name for s in symbols]

        # –û—Å–Ω–æ–≤–Ω—ã–µ forex –ø–∞—Ä—ã
        forex_majors = [
            'EURUSD', 'GBPUSD', 'USDJPY', 'USDCHF',
            'AUDUSD', 'USDCAD', 'NZDUSD', 'EURGBP',
            'EURJPY', 'EURCHF', 'GBPJPY', 'AUDJPY'
        ]

        # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã
        available_majors = [s for s in symbol_names if s in forex_majors]

        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã —Å –ø–æ—Å—Ç—Ñ–∏–∫—Å–∞–º–∏
        for symbol in symbol_names:
            if any(major in symbol for major in forex_majors) and symbol not in available_majors:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ forex –ø–∞—Ä–∞
                if any(postfix in symbol for postfix in ['', 'rfd', 'micro', 'mini']):
                    available_majors.append(symbol)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        available_majors.sort()
        return available_majors

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
        return []


def get_all_symbols():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """
    try:
        symbols = mt5.symbols_get()
        symbol_names = [s.name for s in symbols]
        return symbol_names
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
        return []


def get_symbol_info(symbol):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∏–º–≤–æ–ª–µ
    """
    try:
        symbol_info = mt5.symbol_info(symbol)
        if symbol_info is None:
            print(f"‚ùå –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        return {
            'name': symbol_info.name,
            'bid': symbol_info.bid,
            'ask': symbol_info.ask,
            'spread': symbol_info.ask - symbol_info.bid,
            'digits': symbol_info.digits,
            'trade_mode': symbol_info.trade_mode,
            'trade_allowed': symbol_info.trade_allowed
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ {symbol}: {e}")
        return None


def load_data(symbol, timeframe=mt5.TIMEFRAME_M15, bars_count=2000):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª –¥–æ—Å—Ç—É–ø–µ–Ω
        if not mt5.symbol_select(symbol, True):
            print(f"‚ùå –°–∏–º–≤–æ–ª {symbol} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
            return pd.DataFrame()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        end_time = datetime.now()
        start_time = end_time - timedelta(days=30)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 30 –¥–Ω–µ–π

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞—Ä—ã
        rates = mt5.copy_rates_range(symbol, timeframe, start_time, end_time)

        if rates is None or len(rates) == 0:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
            return pd.DataFrame()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
        df = pd.DataFrame(rates)
        df['time'] = pd.to_datetime(df['time'], unit='s')
        df.set_index('time', inplace=True)

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –±–∞—Ä–æ–≤ –¥–ª—è {symbol}")
        return df

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
        return pd.DataFrame()


def get_current_price(symbol):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Å–∏–º–≤–æ–ª–∞
    """
    try:
        tick = mt5.symbol_info_tick(symbol)
        if tick is None:
            return None, None

        return tick.bid, tick.ask
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
        return None, None


def place_order(symbol, order_type, lot_size, stop_loss=0.0, take_profit=0.0):
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        bid, ask = get_current_price(symbol)
        if bid is None or ask is None:
            return False

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
        if order_type == 'buy':
            price = ask
            order_type_mt5 = mt5.ORDER_TYPE_BUY
            sl = price - stop_loss if stop_loss > 0 else 0
            tp = price + take_profit if take_profit > 0 else 0
        else:  # sell
            price = bid
            order_type_mt5 = mt5.ORDER_TYPE_SELL
            sl = price + stop_loss if stop_loss > 0 else 0
            tp = price - take_profit if take_profit > 0 else 0

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        request = {
            "action": mt5.TRADE_ACTION_DEAL,
            "symbol": symbol,
            "volume": lot_size,
            "type": order_type_mt5,
            "price": price,
            "sl": sl,
            "tp": tp,
            "deviation": 10,
            "magic": 234000,
            "comment": "AI Trader",
            "type_time": mt5.ORDER_TIME_GTC,
            "type_filling": mt5.ORDER_FILLING_IOC,
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
        result = mt5.order_send(request)

        if result.retcode != mt5.TRADE_RETCODE_DONE:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞ {symbol}: {result.retcode}")
            return False

        print(f"‚úÖ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_type.upper()} {symbol} {lot_size} –ª–æ—Ç–æ–≤")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}: {e}")
        return False


def close_all_orders(symbol=None):
    """
    –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ (–¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏–ª–∏ –≤—Å–µ—Ö)
    """
    try:
        orders = mt5.positions_get(symbol=symbol) if symbol else mt5.positions_get()

        if orders is None:
            print("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
            return True

        closed_count = 0
        for order in orders:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–¥–µ–ª–∫–∏
            close_type = mt5.ORDER_TYPE_SELL if order.type == mt5.ORDER_TYPE_BUY else mt5.ORDER_TYPE_BUY

            close_request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "position": order.ticket,
                "symbol": order.symbol,
                "volume": order.volume,
                "type": close_type,
                "price": mt5.symbol_info_tick(
                    order.symbol).bid if close_type == mt5.ORDER_TYPE_SELL else mt5.symbol_info_tick(order.symbol).ask,
                "deviation": 10,
                "magic": 234000,
                "comment": "Close AI",
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_IOC,
            }

            result = mt5.order_send(close_request)
            if result.retcode == mt5.TRADE_RETCODE_DONE:
                closed_count += 1
                print(f"‚úÖ –ó–∞–∫—Ä—ã—Ç –æ—Ä–¥–µ—Ä {order.ticket} –¥–ª—è {order.symbol}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞ {order.ticket}: {result.retcode}")

        print(f"üìä –ó–∞–∫—Ä—ã—Ç–æ –æ—Ä–¥–µ—Ä–æ–≤: {closed_count}/{len(orders)}")
        return closed_count == len(orders)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
        return False
