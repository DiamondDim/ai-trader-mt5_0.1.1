import MetaTrader5 as mt5
import pandas as pd
import numpy as np
from typing import List, Optional, Dict
from datetime import datetime
import time


class MT5Client:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è MT5 –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ä–µ—à–µ–Ω–∏–µ–º –æ—à–∏–±–∫–∏ 10030"""

    def __init__(self, config: Dict):
        self.config = config
        self.connected = False

    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MT5"""
        mt5_config = self.config.get('mt5', {})

        print("üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5...")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        mt5.shutdown()

        try:
            if not mt5.initialize(
                    path=mt5_config.get('path', ""),
                    server=mt5_config.get('server', ""),
                    login=mt5_config.get('login', 0),
                    password=mt5_config.get('password', ""),
                    timeout=mt5_config.get('timeout', 60000)
            ):
                error = mt5.last_error()
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MT5: {error}")
                return False

            self.connected = True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            account_info = mt5.account_info()
            if account_info is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ")
                mt5.shutdown()
                self.connected = False
                return False

            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MT5")
            print(f"   –°—á–µ—Ç: {account_info.login}")
            print(f"   –°–µ—Ä–≤–µ—Ä: {account_info.server}")
            print(f"   –í–∞–ª—é—Ç–∞: {account_info.currency}")
            print(f"   –ë–∞–ª–∞–Ω—Å: {account_info.balance}")

            return True

        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ MT5: {e}")
            return False

    def get_historical_data(self, symbol: str, bars: int = 1000) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.connected:
            print("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MT5")
            return None

        timeframe_str = self.config.get('trading', {}).get('timeframe', 'M15')
        timeframe_mapping = {
            'M1': mt5.TIMEFRAME_M1,
            'M5': mt5.TIMEFRAME_M5,
            'M15': mt5.TIMEFRAME_M15,
            'H1': mt5.TIMEFRAME_H1,
            'H4': mt5.TIMEFRAME_H4,
            'D1': mt5.TIMEFRAME_D1
        }
        timeframe = timeframe_mapping.get(timeframe_str, mt5.TIMEFRAME_M15)

        print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} ({bars} –±–∞—Ä–æ–≤)")

        try:
            rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, bars)

            if rates is None:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                return None

            df = pd.DataFrame(rates)
            df['time'] = pd.to_datetime(df['time'], unit='s')
            df.set_index('time', inplace=True)

            df.rename(columns={
                'open': 'open',
                'high': 'high',
                'low': 'low',
                'close': 'close',
                'tick_volume': 'tick_volume',
                'spread': 'spread',
                'real_volume': 'volume'
            }, inplace=True)

            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –±–∞—Ä–æ–≤ –¥–ª—è {symbol}")
            return df

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def get_current_data(self, symbol: str, bars: int = 50) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if not self.connected:
            print("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MT5")
            return None

        timeframe_str = self.config.get('trading', {}).get('timeframe', 'M15')
        timeframe_mapping = {
            'M1': mt5.TIMEFRAME_M1,
            'M5': mt5.TIMEFRAME_M5,
            'M15': mt5.TIMEFRAME_M15,
            'H1': mt5.TIMEFRAME_H1,
            'H4': mt5.TIMEFRAME_H4,
            'D1': mt5.TIMEFRAME_D1
        }
        timeframe = timeframe_mapping.get(timeframe_str, mt5.TIMEFRAME_M15)

        print(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")

        try:
            rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, bars)

            if rates is None:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                return None

            df = pd.DataFrame(rates)
            df['time'] = pd.to_datetime(df['time'], unit='s')
            df.set_index('time', inplace=True)

            df.rename(columns={
                'open': 'open',
                'high': 'high',
                'low': 'low',
                'close': 'close',
                'tick_volume': 'tick_volume',
                'spread': 'spread',
                'real_volume': 'volume'
            }, inplace=True)

            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Ç–µ–∫—É—â–∏—Ö –±–∞—Ä–æ–≤ –¥–ª—è {symbol}")
            return df

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def get_symbol_info(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ"""
        if not self.connected:
            return None

        symbol_info = mt5.symbol_info(symbol)
        if symbol_info is None:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ {symbol}")
            return None

        return {
            'name': symbol_info.name,
            'bid': symbol_info.bid,
            'ask': symbol_info.ask,
            'point': symbol_info.point,
            'trade_tick_size': symbol_info.trade_tick_size,
            'trade_tick_value': symbol_info.trade_tick_value,
            'trade_contract_size': symbol_info.trade_contract_size,
            'trade_mode': symbol_info.trade_mode,
            'trade_stops_level': symbol_info.trade_stops_level,
            'trade_freeze_level': symbol_info.trade_freeze_level
        }

    def get_open_positions_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if not self.connected:
            return 0

        positions = mt5.positions_get()
        return len(positions) if positions else 0

    def get_open_positions(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if not self.connected:
            return []

        positions = mt5.positions_get()
        return positions if positions else []

    def close_all_positions(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if not self.connected:
            return False

        positions = self.get_open_positions()
        if not positions:
            print("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
            return True

        print(f"üîª –ó–∞–∫—Ä—ã—Ç–∏–µ {len(positions)} –ø–æ–∑–∏—Ü–∏–π...")

        success_count = 0
        for position in positions:
            symbol = position.symbol
            volume = position.volume
            position_id = position.ticket

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–¥–µ–ª–∫–∏
            if position.type == mt5.ORDER_TYPE_BUY:
                order_type = mt5.ORDER_TYPE_SELL
                price = mt5.symbol_info_tick(symbol).bid
            else:
                order_type = mt5.ORDER_TYPE_BUY
                price = mt5.symbol_info_tick(symbol).ask

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "symbol": symbol,
                "volume": volume,
                "type": order_type,
                "position": position_id,
                "price": price,
                "deviation": 20,
                "magic": 0,
                "comment": "Close by robot",
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_FOK,
            }

            result = mt5.order_send(request)
            if result and result.retcode == mt5.TRADE_RETCODE_DONE:
                print(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {position_id} –ø–æ {symbol}")
                success_count += 1
            else:
                error = self.get_error_description(result.retcode) if result else "Unknown error"
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {position_id}: {error}")

        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –∑–∞–∫—Ä—ã—Ç–æ {success_count}/{len(positions)} –ø–æ–∑–∏—Ü–∏–π")
        return success_count == len(positions)

    def place_order(self, symbol: str, order_type: int, volume: float,
                    stop_loss: float = 0, take_profit: float = 0) -> bool:
        """
        –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (—Ä–µ—à–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ 10030)
        """
        if not self.connected:
            print("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MT5")
            return False

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
        symbol_info = mt5.symbol_info(symbol)
        if symbol_info is None:
            print(f"‚ùå –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        if not symbol_info.visible:
            print(f"üîß –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª {symbol}...")
            if not mt5.symbol_select(symbol, True):
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª {symbol}")
                return False

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
        tick = mt5.symbol_info_tick(symbol)
        if order_type == mt5.ORDER_TYPE_BUY:
            price = tick.ask
        else:
            price = tick.bid

        print(f"üí∞ –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è {symbol}: Bid={tick.bid:.5f}, Ask={tick.ask:.5f}")

        # –ö–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º FOK –≤–º–µ—Å—Ç–æ IOC –∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π deviation
        request = {
            "action": mt5.TRADE_ACTION_DEAL,
            "symbol": symbol,
            "volume": volume,
            "type": order_type,
            "price": price,
            "deviation": 20,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π deviation
            "magic": 0,  # –ë–µ–∑ magic number
            "comment": "AI Trade",
            "type_time": mt5.ORDER_TIME_GTC,
            "type_filling": mt5.ORDER_FILLING_FOK,  # –ö–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ!
        }

        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞:")
        print(f"   –°–∏–º–≤–æ–ª: {symbol}")
        print(f"   –¢–∏–ø: {'BUY' if order_type == mt5.ORDER_TYPE_BUY else 'SELL'}")
        print(f"   –û–±—ä–µ–º: {volume}")
        print(f"   –¶–µ–Ω–∞: {price:.5f}")
        print(f"   SL: {stop_loss:.5f}")
        print(f"   TP: {take_profit:.5f}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞
        result = mt5.order_send(request)

        if result is None:
            error = mt5.last_error()
            print(f"‚ùå order_send –≤–µ—Ä–Ω—É–ª None. –û—à–∏–±–∫–∞: {error}")
            return False

        if result.retcode != mt5.TRADE_RETCODE_DONE:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞ {result.retcode}: {self.get_error_description(result.retcode)}")
            return False

        print(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        print(f"   –ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: {result.order}")
        print(f"   –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {result.price:.5f}")
        print(f"   –û–±—ä–µ–º: {result.volume}")

        # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ —É–∫–∞–∑–∞–Ω—ã SL/TP, –ø—ã—Ç–∞–µ–º—Å—è –∏—Ö —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        if stop_loss > 0 or take_profit > 0:
            self._set_sltp_after_open(symbol, result.order, stop_loss, take_profit)

        return True

    def _set_sltp_after_open(self, symbol: str, order_id: int, stop_loss: float, take_profit: float):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ SL/TP –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            time.sleep(1)

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É –æ—Ä–¥–µ—Ä–∞
            positions = mt5.positions_get(symbol=symbol)
            if not positions:
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL/TP")
                return

            # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
            position = None
            for pos in positions:
                if pos.ticket == order_id:
                    position = pos
                    break

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ticket, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É
            if position is None and positions:
                position = positions[-1]
                print(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é: {position.ticket}")

            if position is None:
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL/TP")
                return

            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é
            request = {
                "action": mt5.TRADE_ACTION_SLTP,
                "position": position.ticket,
                "sl": stop_loss,
                "tp": take_profit,
                "deviation": 20,
                "magic": 0,
            }

            result = mt5.order_send(request)
            if result and result.retcode == mt5.TRADE_RETCODE_DONE:
                print(f"‚úÖ SL/TP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: SL={stop_loss:.5f}, TP={take_profit:.5f}")
            else:
                error_desc = self.get_error_description(result.retcode) if result else "Unknown error"
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL/TP: {error_desc}")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ SL/TP: {e}")

    def get_error_description(self, error_code: int) -> str:
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫"""
        error_descriptions = {
            10004: "Requote",
            10006: "Request rejected",
            10007: "Request canceled by trader",
            10008: "Order placed",
            10009: "Request completed",
            10010: "Only part of the request was completed",
            10011: "Request processing error",
            10012: "Request canceled by timeout",
            10013: "Invalid request",
            10014: "Invalid volume in the request",
            10015: "Invalid price in the request",
            10016: "Invalid stops in the request",
            10017: "Trade is disabled",
            10018: "Market is closed",
            10019: "There are not enough money to complete the request",
            10020: "Prices changed",
            10021: "There are no quotes to process the request",
            10022: "Invalid order expiration date in the request",
            10023: "Order state changed",
            10024: "Too frequent requests",
            10025: "No changes in request",
            10026: "Autotrading disabled by server",
            10027: "Autotrading disabled by client terminal",
            10028: "Request locked for processing",
            10029: "Order or position frozen",
            10030: "Invalid S/L or T/P",
        }
        return error_descriptions.get(error_code, f"Unknown error {error_code}")

    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MT5"""
        if self.connected:
            mt5.shutdown()
            self.connected = False
            print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MT5")
