import pandas as pd
from datetime import datetime, timedelta
import time

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ MetaTrader5
try:
    import MetaTrader5 as mt5

    HAS_MT5 = True
except ImportError:
    print("‚ùå MetaTrader5 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install MetaTrader5")
    HAS_MT5 = False


def initialize_mt5():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5
    """
    if not HAS_MT5:
        print("‚ùå MetaTrader5 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

    try:
        if not mt5.initialize():
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MT5, –∫–æ–¥ –æ—à–∏–±–∫–∏:", mt5.last_error())
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        if not mt5.terminal_info():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É")
            return False

        print("‚úÖ MetaTrader5 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ
        account_info = mt5.account_info()
        if account_info:
            print(f"‚úÖ –°—á–µ—Ç: {account_info.login}, –ë–∞–ª–∞–Ω—Å: {account_info.balance:.2f}")
            print(f"üí∞ –í–∞–ª—é—Ç–∞ —Å—á–µ—Ç–∞: {account_info.currency}")
            print(f"üîß –¢–æ—Ä–≥–æ–≤—ã–π —Ä–µ–∂–∏–º: {'–î–µ–º–æ' if account_info.trade_mode == 1 else '–†–µ–∞–ª—å–Ω—ã–π'}")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MT5: {e}")
        return False


def get_available_symbols():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –∏–∑ MT5
    """
    if not HAS_MT5:
        print("‚ùå MetaTrader5 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return []

    try:
        symbols = mt5.symbols_get()
        if symbols is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ MT5")
            return []

        symbol_names = [s.name for s in symbols]

        # –û—Å–Ω–æ–≤–Ω—ã–µ forex –ø–∞—Ä—ã
        forex_majors = [
            'EURUSD', 'GBPUSD', 'USDJPY', 'USDCHF',
            'AUDUSD', 'USDCAD', 'NZDUSD', 'EURGBP',
            'EURJPY', 'EURCHF', 'GBPJPY', 'AUDJPY'
        ]

        # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã
        available_majors = [s for s in symbol_names if s in forex_majors]

        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã —Å –ø–æ—Å—Ç—Ñ–∏–∫—Å–∞–º–∏
        for symbol in symbol_names:
            if any(major in symbol for major in forex_majors) and symbol not in available_majors:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ forex –ø–∞—Ä–∞
                if any(postfix in symbol for postfix in ['', 'rfd', 'micro', 'mini']):
                    available_majors.append(symbol)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        available_majors.sort()
        return available_majors

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
        return []


def get_all_symbols():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """
    if not HAS_MT5:
        return []

    try:
        symbols = mt5.symbols_get()
        if symbols is None:
            return []
        symbol_names = [s.name for s in symbols]
        return symbol_names
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
        return []


def get_symbol_info(symbol):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∏–º–≤–æ–ª–µ
    """
    if not HAS_MT5:
        return None

    try:
        symbol_info = mt5.symbol_info(symbol)
        if symbol_info is None:
            print(f"‚ùå –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        info_dict = {
            'name': symbol_info.name,
            'bid': getattr(symbol_info, 'bid', 0),
            'ask': getattr(symbol_info, 'ask', 0),
            'spread': getattr(symbol_info, 'spread', 0),
            'digits': getattr(symbol_info, 'digits', 5),
            'trade_mode': getattr(symbol_info, 'trade_mode', 0),
            'point': getattr(symbol_info, 'point', 0.00001),
            'trade_stops_level': getattr(symbol_info, 'trade_stops_level', 0),
            'trade_contract_size': getattr(symbol_info, 'trade_contract_size', 100000),
            'currency_base': getattr(symbol_info, 'currency_base', ''),
            'currency_profit': getattr(symbol_info, 'currency_profit', ''),
            'currency_margin': getattr(symbol_info, 'currency_margin', ''),
        }

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ø—Ä–µ–¥, –µ—Å–ª–∏ –æ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
        if info_dict['spread'] == 0 and info_dict['ask'] > 0 and info_dict['bid'] > 0:
            info_dict['spread'] = info_dict['ask'] - info_dict['bid']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏
        trade_mode = info_dict['trade_mode']
        info_dict['trade_allowed'] = trade_mode != 0  # 0 = SYMBOL_TRADE_MODE_DISABLED

        return info_dict

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ {symbol}: {e}")
        return None


def load_data(symbol, timeframe="M15", bars_count=2000, timeframe_str=None):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    """
    if not HAS_MT5:
        return pd.DataFrame()

    try:
        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω timeframe_str, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if timeframe_str is not None:
            timeframe = timeframe_str

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ —á–∏—Å–ª–æ–≤–æ–π
        timeframe_map = {
            'M1': mt5.TIMEFRAME_M1,
            'M5': mt5.TIMEFRAME_M5,
            'M15': mt5.TIMEFRAME_M15,
            'M30': mt5.TIMEFRAME_M30,
            'H1': mt5.TIMEFRAME_H1,
            'H4': mt5.TIMEFRAME_H4,
            'D1': mt5.TIMEFRAME_D1,
            'W1': mt5.TIMEFRAME_W1,
            'MN1': mt5.TIMEFRAME_MN1
        }

        timeframe_num = timeframe_map.get(timeframe, mt5.TIMEFRAME_M15)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª –¥–æ—Å—Ç—É–ø–µ–Ω
        if not mt5.symbol_select(symbol, True):
            print(f"‚ùå –°–∏–º–≤–æ–ª {symbol} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
            return pd.DataFrame()

        print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} (—Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}, –±–∞—Ä–æ–≤: {bars_count})")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        rates = mt5.copy_rates_from(symbol, timeframe_num, datetime.now(), bars_count)

        if rates is None or len(rates) == 0:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
            return pd.DataFrame()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
        df = pd.DataFrame(rates)
        df['time'] = pd.to_datetime(df['time'], unit='s')
        df.set_index('time', inplace=True)

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –±–∞—Ä–æ–≤ –¥–ª—è {symbol}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {df.index[0]} - {df.index[-1]}")

        return df

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
        import traceback
        traceback.print_exc()
        return pd.DataFrame()


def get_current_price(symbol):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Å–∏–º–≤–æ–ª–∞
    """
    if not HAS_MT5:
        return None, None

    try:
        tick = mt5.symbol_info_tick(symbol)
        if tick is None:
            return None, None

        return tick.bid, tick.ask
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
        return None, None


def check_trading_allowed(symbol):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è –¥–ª—è —Å–∏–º–≤–æ–ª–∞
    """
    if not HAS_MT5:
        return False

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
        symbol_info = mt5.symbol_info(symbol)
        if symbol_info is None:
            print(f"‚ùå –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è
        if symbol_info.trade_mode != 0:  # 0 = SYMBOL_TRADE_MODE_DISABLED
            print(f"‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –¥–ª—è {symbol}")
            return True
        else:
            print(f"‚ùå –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–ª—è {symbol}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {symbol}: {e}")
        return False


def place_order_simple(symbol, order_type, lot_size):
    """
    –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –ë–ï–ó —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
    """
    if not HAS_MT5:
        return False

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è
        if not check_trading_allowed(symbol):
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        bid, ask = get_current_price(symbol)
        if bid is None or ask is None:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è {symbol}")
            return False

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
        if order_type == 'buy':
            price = ask
            order_type_mt5 = mt5.ORDER_TYPE_BUY
        else:  # sell
            price = bid
            order_type_mt5 = mt5.ORDER_TYPE_SELL

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ë–ï–ó SL/TP
        request = {
            "action": mt5.TRADE_ACTION_DEAL,
            "symbol": symbol,
            "volume": lot_size,
            "type": order_type_mt5,
            "price": price,
            "deviation": 20,
            "magic": 234000,
            "comment": "AI Trader Simple",
            "type_time": mt5.ORDER_TIME_GTC,
            "type_filling": mt5.ORDER_FILLING_IOC,
        }

        print(f"üîß –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞: {order_type.upper()} {symbol} {lot_size} –ª–æ—Ç–æ–≤")
        print(f"   üí∞ –¶–µ–Ω–∞: {price:.5f}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
        result = mt5.order_send(request)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ None
        if result is None:
            print(f"‚ùå MT5 –≤–µ—Ä–Ω—É–ª None –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ä–¥–µ—Ä–∞")
            print(f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MT5 –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—á–µ—Ç–∞")
            return False

        if result.retcode == mt5.TRADE_RETCODE_DONE:
            print(f"‚úÖ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_type.upper()} {symbol} {lot_size} –ª–æ—Ç–æ–≤")
            print(f"   üìä –ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: {result.order}")
            return True
        else:
            error_msg = get_error_description(result.retcode)
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞ {symbol}: {result.retcode} - {error_msg}")
            return False

    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}: {e}")
        import traceback
        traceback.print_exc()
        return False


def place_order_with_sltp(symbol, order_type, lot_size, stop_loss_pips, take_profit_pips):
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–º –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–º (–≤ –ø–∏–ø—Å–∞—Ö)
    """
    if not HAS_MT5:
        return False

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è
        if not check_trading_allowed(symbol):
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        bid, ask = get_current_price(symbol)
        if bid is None or ask is None:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è {symbol}")
            return False

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
        symbol_info = get_symbol_info(symbol)
        if not symbol_info:
            return False

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
        if order_type == 'buy':
            price = ask
            order_type_mt5 = mt5.ORDER_TYPE_BUY
            # –î–ª—è BUY: SL –Ω–∏–∂–µ —Ü–µ–Ω—ã, TP –≤—ã—à–µ —Ü–µ–Ω—ã
            sl = price - (stop_loss_pips * 0.0001) if stop_loss_pips > 0 else 0
            tp = price + (take_profit_pips * 0.0001) if take_profit_pips > 0 else 0
        else:  # sell
            price = bid
            order_type_mt5 = mt5.ORDER_TYPE_SELL
            # –î–ª—è SELL: SL –≤—ã—à–µ —Ü–µ–Ω—ã, TP –Ω–∏–∂–µ —Ü–µ–Ω—ã
            sl = price + (stop_loss_pips * 0.0001) if stop_loss_pips > 0 else 0
            tp = price - (take_profit_pips * 0.0001) if take_profit_pips > 0 else 0

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å SL/TP
        request = {
            "action": mt5.TRADE_ACTION_DEAL,
            "symbol": symbol,
            "volume": lot_size,
            "type": order_type_mt5,
            "price": price,
            "sl": sl,
            "tp": tp,
            "deviation": 20,
            "magic": 234000,
            "comment": "AI Trader SL/TP",
            "type_time": mt5.ORDER_TIME_GTC,
            "type_filling": mt5.ORDER_FILLING_IOC,
        }

        print(f"üîß –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞: {order_type.upper()} {symbol} {lot_size} –ª–æ—Ç–æ–≤")
        print(f"   üí∞ –¶–µ–Ω–∞: {price:.5f}, SL: {sl:.5f}, TP: {tp:.5f}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
        result = mt5.order_send(request)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ None
        if result is None:
            print(f"‚ùå MT5 –≤–µ—Ä–Ω—É–ª None –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ä–¥–µ—Ä–∞")
            return False

        if result.retcode == mt5.TRADE_RETCODE_DONE:
            print(f"‚úÖ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_type.upper()} {symbol} {lot_size} –ª–æ—Ç–æ–≤")
            print(f"   üìä –ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: {result.order}")
            return True
        else:
            error_msg = get_error_description(result.retcode)
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞ {symbol}: {result.retcode} - {error_msg}")
            return False

    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}: {e}")
        import traceback
        traceback.print_exc()
        return False


def place_order(symbol, order_type, lot_size, stop_loss=0.0, take_profit=0.0):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
    """
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å SL/TP
    if stop_loss > 0 or take_profit > 0:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–∏–ø—Å—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ stop_loss –∏ take_profit –≤ —Ü–µ–Ω–µ)
        stop_loss_pips = int(stop_loss / 0.0001) if stop_loss > 0 else 0
        take_profit_pips = int(take_profit / 0.0001) if take_profit > 0 else 0
        return place_order_with_sltp(symbol, order_type, lot_size, stop_loss_pips, take_profit_pips)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ SL/TP
        return place_order_simple(symbol, order_type, lot_size)


def get_error_description(error_code):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ—à–∏–±–∫–∏ MT5 –ø–æ –∫–æ–¥—É
    """
    error_descriptions = {
        10000: "TRADE_RETCODE_REQUOTE - –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∫–æ—Ç–∏—Ä–æ–≤–∫–∞",
        10001: "TRADE_RETCODE_REJECT - –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω",
        10002: "TRADE_RETCODE_CANCEL - –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω",
        10003: "TRADE_RETCODE_PLACED - –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω",
        10004: "TRADE_RETCODE_DONE - –°–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞",
        10005: "TRADE_RETCODE_DONE_PARTIAL - –°–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ",
        10006: "TRADE_RETCODE_ERROR - –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
        10007: "TRADE_RETCODE_TIMEOUT - –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É",
        10008: "TRADE_RETCODE_INVALID - –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
        10009: "TRADE_RETCODE_INVALID_VOLUME - –ù–µ–≤–µ—Ä–Ω—ã–π –æ–±—ä–µ–º",
        10010: "TRADE_RETCODE_INVALID_PRICE - –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞",
        10011: "TRADE_RETCODE_INVALID_STOPS - –ù–µ–≤–µ—Ä–Ω—ã–µ —Å—Ç–æ–ø—ã",
        10012: "TRADE_RETCODE_TRADE_DISABLED - –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞",
        10013: "TRADE_RETCODE_MARKET_CLOSED - –†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç",
        10014: "TRADE_RETCODE_NO_MONEY - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
        10015: "TRADE_RETCODE_PRICE_CHANGED - –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å",
        10016: "TRADE_RETCODE_PRICE_OFF - –ù–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–æ–∫",
        10017: "TRADE_RETCODE_INVALID_EXPIRATION - –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏",
        10018: "TRADE_RETCODE_ORDER_CHANGED - –û—Ä–¥–µ—Ä –∏–∑–º–µ–Ω–µ–Ω",
        10019: "TRADE_RETCODE_TOO_MANY_REQUESTS - –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
        10020: "TRADE_RETCODE_NO_CHANGES - –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π",
        10021: "TRADE_RETCODE_SERVER_DISABLES_AT - –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –∑–∞–ø—Ä–µ—â–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º",
        10022: "TRADE_RETCODE_CLIENT_DISABLES_AT - –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –∑–∞–ø—Ä–µ—â–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º",
        10023: "TRADE_RETCODE_LOCKED - –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        10024: "TRADE_RETCODE_FROZEN - –û—Ä–¥–µ—Ä –∏–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã",
        10025: "TRADE_RETCODE_INVALID_FILL - –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è",
        10026: "TRADE_RETCODE_CONNECTION - –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ç–æ—Ä–≥–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º",
        10027: "TRADE_RETCODE_ONLY_REAL - –†–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è",
        10028: "TRADE_RETCODE_LIMIT_ORDERS - –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä–æ–≤",
        10029: "TRADE_RETCODE_LIMIT_VOLUME - –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ–±—ä–µ–º–∞",
        10030: "TRADE_RETCODE_INVALID_ORDER - –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ä–¥–µ—Ä",
        10031: "TRADE_RETCODE_POSITION_CLOSED - –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞",
        10032: "TRADE_RETCODE_INVALID_CLOSE_VOLUME - –ù–µ–≤–µ—Ä–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è",
        10033: "TRADE_RETCODE_CLOSE_ORDER_EXIST - –£–∂–µ –µ—Å—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ",
        10034: "TRADE_RETCODE_LIMIT_POSITIONS - –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π",
    }

    return error_descriptions.get(error_code, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {error_code}")


def close_all_orders(symbol=None):
    """
    –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ (–¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏–ª–∏ –≤—Å–µ—Ö)
    """
    if not HAS_MT5:
        return False

    try:
        orders = mt5.positions_get(symbol=symbol) if symbol else mt5.positions_get()

        if orders is None:
            print("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
            return True

        closed_count = 0
        for order in orders:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–¥–µ–ª–∫–∏
            close_type = mt5.ORDER_TYPE_SELL if order.type == mt5.ORDER_TYPE_BUY else mt5.ORDER_TYPE_BUY

            close_request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "position": order.ticket,
                "symbol": order.symbol,
                "volume": order.volume,
                "type": close_type,
                "price": mt5.symbol_info_tick(
                    order.symbol).bid if close_type == mt5.ORDER_TYPE_SELL else mt5.symbol_info_tick(order.symbol).ask,
                "deviation": 20,
                "magic": 234000,
                "comment": "Close AI",
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_IOC,
            }

            result = mt5.order_send(close_request)
            if result and result.retcode == mt5.TRADE_RETCODE_DONE:
                closed_count += 1
                print(f"‚úÖ –ó–∞–∫—Ä—ã—Ç –æ—Ä–¥–µ—Ä {order.ticket} –¥–ª—è {order.symbol}")
            else:
                error_msg = get_error_description(result.retcode) if result else "None result"
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞ {order.ticket}: {error_msg}")

        print(f"üìä –ó–∞–∫—Ä—ã—Ç–æ –æ—Ä–¥–µ—Ä–æ–≤: {closed_count}/{len(orders)}")
        return closed_count == len(orders)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
        return False
