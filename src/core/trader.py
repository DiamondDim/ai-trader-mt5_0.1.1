import pandas as pd
import numpy as np
import time
from datetime import datetime
from typing import Dict, Optional
import MetaTrader5 as mt5


class Trader:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""

    def __init__(self, config: Dict, mt5_client, risk_manager):
        self.config = config
        self.mt5_client = mt5_client
        self.risk_manager = risk_manager
        self.is_trading = False
        self.current_symbol = None
        self.stop_requested = False

    def start_trading(self, symbol: str, model, feature_engineer) -> bool:
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        print(f"üéØ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {symbol}")

        self.current_symbol = symbol
        self.is_trading = True
        self.stop_requested = False

        # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
        error_count = 0
        max_errors = 5

        try:
            while self.is_trading and not self.stop_requested and error_count < max_errors:
                current_data = self.mt5_client.get_current_data(symbol, bars=50)
                if current_data is None or current_data.empty:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
                    error_count += 1
                    time.sleep(30)
                    continue

                try:
                    features_df = feature_engineer.prepare_features(current_data, symbol)
                    feature_names = feature_engineer.get_feature_names()

                    if len(features_df) == 0:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ñ–∏—á–∏")
                        error_count += 1
                        time.sleep(30)
                        continue

                    latest_features = features_df[feature_names].iloc[-1:]

                    prediction = model.predict(latest_features)[0]
                    probability = model.predict_proba(latest_features)[0]

                    print(f"üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {prediction}, –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: [{probability[0]:.3f}, {probability[1]:.3f}]")

                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏
                    error_count = 0

                    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    self._make_trading_decision(symbol, prediction, probability, current_data)

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                    error_count += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ–∂–∏–¥–∞–Ω–∏–µ–º
                if not self.stop_requested:
                    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...")
                    for i in range(60):
                        if self.stop_requested:
                            break
                        time.sleep(1)

            if error_count >= max_errors:
                print(f"üõë –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ ({max_errors}). –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            elif self.stop_requested:
                print("üõë –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

            return True

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
            return False

    def _make_trading_decision(self, symbol: str, prediction: int,
                               probability: np.ndarray, data: pd.DataFrame):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã bid –∏ ask
        tick = mt5.symbol_info_tick(symbol)
        if tick is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã")
            return

        current_price = tick.ask if prediction == 1 else tick.bid

        if not self.risk_manager.check_risk(symbol, current_price):
            print("‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ due to risk management")
            return

        # –ü–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        confidence_threshold = 0.7  # 70% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤–º–µ—Å—Ç–æ 60%

        if prediction == 1 and probability[1] > confidence_threshold:
            print(f"‚úÖ –°–∏–≥–Ω–∞–ª –Ω–∞ –ü–û–ö–£–ü–ö–£ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {probability[1]:.1%})")
            self._open_position(symbol, mt5.ORDER_TYPE_BUY, current_price)
        elif prediction == 0 and probability[0] > confidence_threshold:
            print(f"‚úÖ –°–∏–≥–Ω–∞–ª –Ω–∞ –ü–†–û–î–ê–ñ–£ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {probability[0]:.1%})")
            self._open_position(symbol, mt5.ORDER_TYPE_SELL, current_price)
        else:
            print(f"ü§∑ –ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (–º–∞–∫—Å. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {max(probability):.1%})")

    def _open_position(self, symbol: str, order_type: int, price: float):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        volume = self.risk_manager.calculate_position_size(symbol, price)

        if volume <= 0:
            print("‚ö†Ô∏è –û–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª")
            return

        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        stop_loss = self.risk_manager.calculate_stop_loss(symbol, order_type, price)
        take_profit = self.risk_manager.calculate_take_profit(symbol, order_type, price)

        print(f"üí° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞:")
        print(f"   –°–∏–º–≤–æ–ª: {symbol}")
        print(f"   –¢–∏–ø: {'BUY' if order_type == mt5.ORDER_TYPE_BUY else 'SELL'}")
        print(f"   –û–±—ä–µ–º: {volume}")
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price:.5f}")
        print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss:.5f}")
        print(f"   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {take_profit:.5f}")

        result = self.mt5_client.place_order(
            symbol=symbol,
            order_type=order_type,
            volume=volume,
            stop_loss=stop_loss,
            take_profit=take_profit
        )

        if result:
            print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {symbol}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {symbol}")

    def stop_trading(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.stop_requested = True
        self.is_trading = False
        print("üõë –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏...")

    def emergency_stop(self):
        """–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ - –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        print("üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!")
        self.stop_trading()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
        print("üîª –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
        success = self.mt5_client.close_all_positions()

        if success:
            print("‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
        else:
            print("‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å")

        return success

    def get_trading_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        positions = self.mt5_client.get_open_positions()
        positions_info = []

        for pos in positions:
            positions_info.append({
                'ticket': pos.ticket,
                'symbol': pos.symbol,
                'type': 'BUY' if pos.type == mt5.ORDER_TYPE_BUY else 'SELL',
                'volume': pos.volume,
                'open_price': pos.price_open,
                'current_price': pos.price_current,
                'profit': pos.profit,
                'sl': pos.sl,
                'tp': pos.tp
            })

        return {
            'is_trading': self.is_trading,
            'stop_requested': self.stop_requested,
            'current_symbol': self.current_symbol,
            'open_positions_count': len(positions),
            'open_positions': positions_info
        }
