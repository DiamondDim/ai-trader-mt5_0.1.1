import time
import pandas as pd
from datetime import datetime
from src.core.mt5_client import load_data, get_current_price, place_order
from src.ml.feature_engineer import create_features
from src.utils.config import get_symbol_specific_config


class Trader:
    def __init__(self, config):
        self.config = config
        self.symbol = config['trading']['symbol']
        self.symbol_config = get_symbol_specific_config(self.symbol, config)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        from src.ml.model_builder import load_model_for_symbol
        self.model = load_model_for_symbol(self.symbol)

        if not self.model:
            raise Exception(f"–ú–æ–¥–µ–ª—å –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {self.symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        print(f"‚úÖ –¢—Ä–µ–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {self.symbol}")
        print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –õ–æ—Ç={self.symbol_config['lot_size']}, –ú–∞–∫—Å. —Å–ø—Ä–µ–¥={self.symbol_config['max_spread']}")

    def make_prediction(self, data):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features_df = create_features(data)

            if features_df.empty:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
                return None

            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            latest_features = features_df.drop('target', axis=1).iloc[-1:]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
            if latest_features.isnull().any().any():
                print("‚ùå NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
                return None

            # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = self.model.predict(latest_features)[0]
            confidence = self.model.predict_proba(latest_features)[0].max()

            print(f"üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {prediction} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")

            return {
                'prediction': prediction,
                'confidence': confidence,
                'timestamp': datetime.now()
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return None

    def execute_trade_decision(self, prediction_result):
        """
        –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        """
        if not prediction_result:
            return

        prediction = prediction_result['prediction']
        confidence = prediction_result['confidence']

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        min_confidence = self.config['model'].get('min_confidence', 0.6)

        if confidence < min_confidence:
            print(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f} < {min_confidence}")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∏ —Å–ø—Ä–µ–¥
        bid, ask = get_current_price(self.symbol)
        if bid is None or ask is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã")
            return

        spread = ask - bid
        max_spread = self.symbol_config['max_spread']

        if spread > max_spread:
            print(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–µ–¥: {spread:.4f} > {max_spread}")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞
        if prediction == 1:  # BUY
            print(f"üìà –°–∏–≥–Ω–∞–ª BUY –¥–ª—è {self.symbol} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            success = place_order(
                symbol=self.symbol,
                order_type='buy',
                lot_size=self.symbol_config['lot_size'],
                stop_loss=self.symbol_config.get('stop_loss_pips', 20) * 0.0001,
                take_profit=self.symbol_config.get('take_profit_pips', 30) * 0.0001
            )
        else:  # SELL
            print(f"üìâ –°–∏–≥–Ω–∞–ª SELL –¥–ª—è {self.symbol} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            success = place_order(
                symbol=self.symbol,
                order_type='sell',
                lot_size=self.symbol_config['lot_size'],
                stop_loss=self.symbol_config.get('stop_loss_pips', 20) * 0.0001,
                take_profit=self.symbol_config.get('take_profit_pips', 30) * 0.0001
            )

        if success:
            print("‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏")

    def trade_loop(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        """
        print(f"\nüìà –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–û–ì–û –¶–ò–ö–õ–ê –î–õ–Ø {self.symbol}")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 60 —Å–µ–∫—É–Ω–¥")
        print(f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.config['model'].get('min_confidence', 0.6)}")
        print("=" * 50)

        iteration = 0
        try:
            while True:
                iteration += 1
                print(f"\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration} - {datetime.now().strftime('%H:%M:%S')}")

                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                    data = load_data(
                        symbol=self.symbol,
                        timeframe=self.config['data']['timeframe'],
                        bars_count=100  # –ù—É–∂–Ω–æ –º–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
                    )

                    if data.empty:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                        time.sleep(60)
                        continue

                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    prediction_result = self.make_prediction(data)

                    if prediction_result:
                        # –ò—Å–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                        self.execute_trade_decision(prediction_result)

                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                    time.sleep(60)

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ #{iteration}: {e}")
                    time.sleep(10)

        except KeyboardInterrupt:
            print(f"\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {self.symbol}")
