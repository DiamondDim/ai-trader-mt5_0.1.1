#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π –≤ AI Trading Robot
"""

import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
current_dir = os.path.dirname(os.path.abspath(__file__))
src_path = os.path.join(current_dir, 'src')
if src_path not in sys.path:
    sys.path.insert(0, src_path)

from core.mt5_client import initialize_mt5, get_symbol_info, check_trading_allowed, place_order_simple, \
    place_order_with_sltp
import MetaTrader5 as mt5


def diagnose_account():
    """
    –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—á–µ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    """
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—á–µ—Ç–∞ MT5")
    print("=" * 50)

    if not initialize_mt5():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MT5")
        return False

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ
    account_info = mt5.account_info()
    if account_info:
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ:")
        print(f"   üë§ –õ–æ–≥–∏–Ω: {account_info.login}")
        print(f"   üí∞ –ë–∞–ª–∞–Ω—Å: {account_info.balance:.2f}")
        print(f"   üíµ –í–∞–ª—é—Ç–∞: {account_info.currency}")
        print(f"   üè¶ –ö–æ–º–ø–∞–Ω–∏—è: {account_info.company}")
        print(f"   üîß –†–µ–∂–∏–º: {'–î–µ–º–æ' if account_info.trade_mode == 1 else '–†–µ–∞–ª—å–Ω—ã–π'}")
        print(f"   üìà –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ: 1:{account_info.leverage}")
        print(f"   üìä –°–≤–æ–±–æ–¥–Ω–∞—è –º–∞—Ä–∂–∞: {account_info.margin_free:.2f}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ")
        return False

    return True


def diagnose_symbol(symbol):
    """
    –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏–º–≤–æ–ª–∞
    """
    print(f"\nüîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏–º–≤–æ–ª–∞: {symbol}")
    print("=" * 50)

    symbol_info = get_symbol_info(symbol)
    if not symbol_info:
        print(f"‚ùå –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–º–≤–æ–ª–µ:")
    print(f"   üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {symbol_info['name']}")
    print(f"   üí∞ Bid: {symbol_info['bid']:.5f}")
    print(f"   üíµ Ask: {symbol_info['ask']:.5f}")
    print(f"   üìè –°–ø—Ä–µ–¥: {symbol_info['spread']:.5f}")
    print(f"   üî¢ Digits: {symbol_info['digits']}")
    print(f"   üìç Point: {symbol_info['point']}")
    print(f"   üõë Stops Level: {symbol_info['trade_stops_level']}")
    print(f"   üì¶ Contract Size: {symbol_info['trade_contract_size']}")
    print(f"   üí± –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {symbol_info['currency_base']}")
    print(f"   üíµ –í–∞–ª—é—Ç–∞ –ø—Ä–∏–±—ã–ª–∏: {symbol_info['currency_profit']}")
    print(f"   üè¶ –í–∞–ª—é—Ç–∞ –º–∞—Ä–∂–∏: {symbol_info['currency_margin']}")
    print(f"   ‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞: {symbol_info['trade_allowed']}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    trading_allowed = check_trading_allowed(symbol)
    if not trading_allowed:
        print(f"‚ùå –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–ª—è {symbol}")
        return False

    return True


def test_simple_orders(symbol):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –±–µ–∑ SL/TP
    """
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
    print("=" * 50)

    # –¢–µ—Å—Ç 1: BUY –æ—Ä–¥–µ—Ä
    print(f"\nüîπ –¢–µ—Å—Ç 1: BUY –æ—Ä–¥–µ—Ä (0.01 –ª–æ—Ç)")
    success_buy = place_order_simple(symbol, 'buy', 0.01)

    time.sleep(2)

    # –¢–µ—Å—Ç 2: SELL –æ—Ä–¥–µ—Ä
    print(f"\nüîπ –¢–µ—Å—Ç 2: SELL –æ—Ä–¥–µ—Ä (0.01 –ª–æ—Ç)")
    success_sell = place_order_simple(symbol, 'sell', 0.01)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞
    from core.mt5_client import close_all_orders
    print(f"\nüõë –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞...")
    close_success = close_all_orders(symbol)

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Å—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:")
    print(f"   ‚úÖ BUY: {'–£—Å–ø–µ—à–Ω–æ' if success_buy else '–û—à–∏–±–∫–∞'}")
    print(f"   ‚úÖ SELL: {'–£—Å–ø–µ—à–Ω–æ' if success_sell else '–û—à–∏–±–∫–∞'}")
    print(f"   ‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ: {'–£—Å–ø–µ—à–Ω–æ' if close_success else '–û—à–∏–±–∫–∞'}")

    return success_buy or success_sell


def test_sltp_orders(symbol):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ —Å–æ SL/TP
    """
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ —Å–æ SL/TP –¥–ª—è {symbol}")
    print("=" * 50)

    # –¢–µ—Å—Ç 1: BUY –æ—Ä–¥–µ—Ä —Å SL/TP
    print(f"\nüîπ –¢–µ—Å—Ç 1: BUY –æ—Ä–¥–µ—Ä —Å SL/TP (0.01 –ª–æ—Ç, SL=20, TP=30)")
    success_buy = place_order_with_sltp(symbol, 'buy', 0.01, 20, 30)

    time.sleep(2)

    # –¢–µ—Å—Ç 2: SELL –æ—Ä–¥–µ—Ä —Å SL/TP
    print(f"\nüîπ –¢–µ—Å—Ç 2: SELL –æ—Ä–¥–µ—Ä —Å SL/TP (0.01 –ª–æ—Ç, SL=20, TP=30)")
    success_sell = place_order_with_sltp(symbol, 'sell', 0.01, 20, 30)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞
    from core.mt5_client import close_all_orders
    print(f"\nüõë –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞...")
    close_success = close_all_orders(symbol)

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ä–¥–µ—Ä–æ–≤ —Å SL/TP:")
    print(f"   ‚úÖ BUY: {'–£—Å–ø–µ—à–Ω–æ' if success_buy else '–û—à–∏–±–∫–∞'}")
    print(f"   ‚úÖ SELL: {'–£—Å–ø–µ—à–Ω–æ' if success_sell else '–û—à–∏–±–∫–∞'}")
    print(f"   ‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ: {'–£—Å–ø–µ—à–Ω–æ' if close_success else '–û—à–∏–±–∫–∞'}")

    return success_buy or success_sell


def check_mt5_version():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ MT5
    """
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ MT5")
    print("=" * 50)

    try:
        version = mt5.version()
        print(f"‚úÖ –í–µ—Ä—Å–∏—è MT5: {version}")

        terminal_info = mt5.terminal_info()
        if terminal_info:
            print(f"‚úÖ –¢–µ—Ä–º–∏–Ω–∞–ª: {terminal_info.name}")
            print(f"‚úÖ –ü—É—Ç—å: {terminal_info.path}")
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ: {terminal_info.data_path}")
            print(f"‚úÖ –ö–æ–º–º—É–Ω–∏—Ç–∏: {terminal_info.community_account}")
            print(f"‚úÖ –ö–æ–º–º—É–Ω–∏—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {terminal_info.community_connection}")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏: {e}")
        return False


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    """
    import argparse

    parser = argparse.ArgumentParser(description='–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π AI Trading Robot')
    parser.add_argument('symbol', nargs='?', default='EURUSDrfd', help='–°–∏–º–≤–æ–ª –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏')

    args = parser.parse_args()

    print("ü§ñ AI Trading Robot - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏")
    print("=" * 60)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    success = True

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é MT5
    success &= check_mt5_version()

    # 2. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç
    success &= diagnose_account()

    # 3. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª
    success &= diagnose_symbol(args.symbol)

    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
    simple_success = test_simple_orders(args.symbol)

    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞ —Å SL/TP (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç)
    if simple_success:
        sltp_success = test_sltp_orders(args.symbol)
    else:
        print(f"\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç SL/TP –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ—Å—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        sltp_success = False

    print(f"\nüéØ –ò—Ç–æ–≥–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
    print(f"   ‚úÖ –ë–∞–∑–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {'–£—Å–ø–µ—à–Ω–æ' if success else '–° –æ—à–∏–±–∫–∞–º–∏'}")
    print(f"   ‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞: {'–£—Å–ø–µ—à–Ω–æ' if simple_success else '–û—à–∏–±–∫–∞'}")
    print(f"   ‚úÖ –û—Ä–¥–µ—Ä–∞ —Å SL/TP: {'–£—Å–ø–µ—à–Ω–æ' if sltp_success else '–û—à–∏–±–∫–∞'}")

    if simple_success:
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (–±–µ–∑ SL/TP) –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
    else:
        print(f"\nüí° –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞")
        print(f"   üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print(f"   - –î–µ–º–æ-—Å—á–µ—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é")
        print(f"   - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±—Ä–æ–∫–µ—Ä—É")
        print(f"   - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å—á–µ—Ç–µ")

    return simple_success


if __name__ == "__main__":
    success = main()

    if success:
        print(f"\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é: python main.py --mode trade")
    else:
        print(f"\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã—è–≤–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã")
        sys.exit(1)
