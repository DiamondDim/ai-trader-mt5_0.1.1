#!/usr/bin/env python3
"""
AI Trading Robot v0.1.1
–ì–ª–∞–≤–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–∫—Ä–∏–ø—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤
"""

import argparse
import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from utils.config import load_config
from core.trader import Trader
from core.mt5_client import initialize_mt5, close_all_orders, get_symbol_info
from ml.model_builder import train_model, load_model_for_symbol, get_available_models
from symbol_selector import SymbolSelector


def test_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5...")

    if not initialize_mt5():
        print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MT5 –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    from core.mt5_client import get_available_symbols
    symbols = get_available_symbols()

    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MT5 —É—Å–ø–µ—à–Ω–æ")
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä: {len(symbols)}")
    print("üìà –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä:", symbols[:5])

    return True


def train_mode(symbol=None):
    """–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    config = load_config()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    training_symbol = symbol or config['trading']['symbol']

    print(f"üéØ –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {training_symbol}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not initialize_mt5():
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞
    symbol_info = get_symbol_info(training_symbol)
    if not symbol_info:
        print(f"‚ùå –°–∏–º–≤–æ–ª {training_symbol} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

    print(f"‚úÖ –°–∏–º–≤–æ–ª {training_symbol} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
    print(f"   Bid: {symbol_info['bid']}, Ask: {symbol_info['ask']}, Spread: {symbol_info['spread']}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    return train_model(training_symbol)


def trade_mode(symbol=None):
    """–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    config = load_config()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    trading_symbol = symbol or config['trading']['symbol']

    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {trading_symbol}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not initialize_mt5():
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
    model = load_model_for_symbol(trading_symbol)
    if not model:
        print(f"‚ùå –ú–æ–¥–µ–ª—å –¥–ª—è {trading_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print(f"üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: python main.py --mode train --symbol {trading_symbol}")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞
    symbol_info = get_symbol_info(trading_symbol)
    if not symbol_info:
        print(f"‚ùå –°–∏–º–≤–æ–ª {trading_symbol} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

    print(f"‚úÖ –°–∏–º–≤–æ–ª {trading_symbol} –¥–æ—Å—Ç—É–ø–µ–Ω")
    print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: Bid={symbol_info['bid']}, Ask={symbol_info['ask']}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
    try:
        trader = Trader(config)
        trader.trade_loop()
        return True
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ: {e}")
        return False


def status_mode():
    """–†–µ–∂–∏–º —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    config = load_config()

    print("\n" + "=" * 60)
    print("           –°–¢–ê–¢–£–° AI TRADING ROBOT")
    print("=" * 60)

    # –°—Ç–∞—Ç—É—Å MT5
    print("\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MT5:")
    if initialize_mt5():
        print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–∏–º–≤–æ–ª–µ
        current_symbol = config['trading']['symbol']
        symbol_info = get_symbol_info(current_symbol)
        if symbol_info:
            print(f"   üìä –¢–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª: {current_symbol}")
            print(f"   üí∞ –¶–µ–Ω–∞: Bid={symbol_info['bid']}, Ask={symbol_info['ask']}")
            print(f"   üìè –°–ø—Ä–µ–¥: {symbol_info['spread']}")
        else:
            print(f"   ‚ùå –°–∏–º–≤–æ–ª {current_symbol} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        print("   ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")

    # –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
    print("\nü§ñ ML –ú–æ–¥–µ–ª—å:")
    model_info = config['model']
    if model_info.get('current_model') and os.path.exists(model_info['current_model']):
        print(f"   ‚úÖ –ú–æ–¥–µ–ª—å: {os.path.basename(model_info['current_model'])}")
        print(f"   üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {model_info.get('accuracy', 'N/A')}")
        print(f"   üîß –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {model_info.get('features_count', 'N/A')}")
        print(f"   üìÖ –û–±—É—á–µ–Ω–∞: {model_info.get('last_trained', 'N/A')}")
    else:
        print("   ‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞")

    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    print("\nüìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    models = get_available_models()
    if models:
        for i, model in enumerate(models[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   {i}. {model['symbol']} - {model['date']}")
        if len(models) > 5:
            print(f"   ... –∏ –µ—â–µ {len(models) - 5} –º–æ–¥–µ–ª–µ–π")
    else:
        print("   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    print("\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏:")
    trading_config = config['trading']
    print(f"   üìà –°–∏–º–≤–æ–ª: {trading_config['symbol']}")
    print(f"   üì¶ –õ–æ—Ç: {trading_config['lot_size']}")
    print(f"   üìè –ú–∞–∫—Å. —Å–ø—Ä–µ–¥: {trading_config['max_spread']}")

    print("\n" + "=" * 60)

    return True


def select_symbol_mode(auto_train=True):
    """–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–∞"""
    selector = SymbolSelector()
    return selector.run_selection_flow(auto_train=auto_train)


def stop_mode(symbol=None):
    """–†–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏...")

    if not initialize_mt5():
        return False

    success = close_all_orders(symbol)

    if success:
        print("‚úÖ –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç—ã")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞")

    return success


def emergency_stop_mode():
    """–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"""
    print("üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!")

    if not initialize_mt5():
        return False

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
    from core.mt5_client import close_all_orders
    success = close_all_orders()

    if success:
        print("‚úÖ –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")

    return success


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='AI Trading Robot v0.1.1')
    parser.add_argument('--mode', type=str, required=True,
                        choices=['test', 'train', 'trade', 'status', 'stop',
                                 'emergency-stop', 'select-symbol'],
                        help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
    parser.add_argument('--symbol', type=str, help='–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, EURUSD)')
    parser.add_argument('--no-train', action='store_true',
                        help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∏–º–≤–æ–ª–∞')

    args = parser.parse_args()

    print(f"\nü§ñ AI Trading Robot v0.1.1")
    print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üéÆ –†–µ–∂–∏–º: {args.mode}")

    try:
        if args.mode == 'test':
            success = test_connection()
        elif args.mode == 'train':
            success = train_mode(args.symbol)
        elif args.mode == 'trade':
            success = trade_mode(args.symbol)
        elif args.mode == 'status':
            success = status_mode()
        elif args.mode == 'select-symbol':
            success = select_symbol_mode(auto_train=not args.no_train)
        elif args.mode == 'stop':
            success = stop_mode(args.symbol)
        elif args.mode == 'emergency-stop':
            success = emergency_stop_mode()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {args.mode}")
            success = False

        if success:
            print(f"\n‚úÖ –†–µ–∂–∏–º '{args.mode}' –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"\n‚ùå –†–µ–∂–∏–º '{args.mode}' –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

        return success

    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
