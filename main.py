#!/usr/bin/env python3
"""
AI Trading Robot for MetaTrader 5
–ì–ª–∞–≤–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–∫—Ä–∏–ø—Ç
"""

import argparse
import sys
import os
import signal
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
root_dir = Path(__file__).parent
sys.path.append(str(root_dir))

from src.core.mt5_client import MT5Client  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–º–ø–æ—Ä—Ç –∏–∑ mt5_client.py
from src.core.trader import Trader
from src.ml.model_builder import ModelBuilder
from src.ml.feature_engineer import FeatureEngineer
from src.utils.risk_manager import RiskManager
from src.utils.config import Config

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º
trader_instance = None
mt5_client = None


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–±–æ—Ç–∞...")
    if trader_instance:
        trader_instance.stop_trading()
    if mt5_client:
        mt5_client.disconnect()
    sys.exit(0)


def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)  # kill command


def train_model(config, symbol):
    """–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    print("ü§ñ –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏...")

    client = MT5Client(config)  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º MT5Client
    if not client.connect():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MT5")
        return False

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
        data = client.get_historical_data(symbol, bars=1000)
        if data is None or data.empty:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return False

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model_builder = ModelBuilder(config)
        feature_engineer = FeatureEngineer(config)

        print("üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        model_path = model_builder.train_model(data, symbol, feature_engineer)

        if model_path:
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_path}")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
            return False

    finally:
        client.disconnect()


def trade_mode(config, symbol):
    """–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    global trader_instance, mt5_client

    print("üí∞ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞...")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MT5
    mt5_client = MT5Client(config)  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º MT5Client
    if not mt5_client.connect():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MT5")
        return False

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        model_builder = ModelBuilder(config)
        feature_engineer = FeatureEngineer(config)

        model = model_builder.load_model()
        if model is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
            return False

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤ –∏ —Ç—Ä–µ–π–¥–µ—Ä–∞
        risk_manager = RiskManager(config)
        trader_instance = Trader(config, mt5_client, risk_manager)

        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

        # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
        success = trader_instance.start_trading(symbol, model, feature_engineer)

        return success

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ: {e}")
        return False
    finally:
        if mt5_client:
            mt5_client.disconnect()


def status_mode(config):
    """–†–µ–∂–∏–º —Å—Ç–∞—Ç—É—Å–∞"""
    global trader_instance, mt5_client

    print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–æ–±–æ—Ç–∞...")

    mt5_client = MT5Client(config)  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º MT5Client
    if not mt5_client.connect():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MT5")
        return False

    try:
        # –ï—Å–ª–∏ —Ç—Ä–µ–π–¥–µ—Ä –∑–∞–ø—É—â–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
        if trader_instance:
            status = trader_instance.get_trading_status()
        else:
            # –ò–Ω–∞—á–µ –±–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            positions = mt5_client.get_open_positions()
            status = {
                'is_trading': False,
                'stop_requested': False,
                'current_symbol': None,
                'open_positions_count': len(positions),
                'open_positions': []
            }

            for pos in positions:
                status['open_positions'].append({
                    'ticket': pos.ticket,
                    'symbol': pos.symbol,
                    'type': 'BUY' if pos.type == mt5.ORDER_TYPE_BUY else 'SELL',
                    'volume': pos.volume,
                    'open_price': pos.price_open,
                    'current_price': pos.price_current,
                    'profit': pos.profit,
                    'sl': pos.sl,
                    'tp': pos.tp
                })

        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
        print("\n" + "=" * 50)
        print("ü§ñ –°–¢–ê–¢–£–° AI TRADING ROBOT")
        print("=" * 50)
        print(f"üìà –¢–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞: {'‚úÖ –î–ê' if status['is_trading'] else '‚ùå –ù–ï–¢'}")
        print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞: {'‚úÖ –î–ê' if status['stop_requested'] else '‚ùå –ù–ï–¢'}")
        print(f"üéØ –¢–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª: {status['current_symbol'] or '–ù–µ—Ç'}")
        print(f"üìä –û—Ç–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {status['open_positions_count']}")

        if status['open_positions']:
            print("\nüíº –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò:")
            for pos in status['open_positions']:
                profit_color = "üü¢" if pos['profit'] >= 0 else "üî¥"
                print(f"   {pos['ticket']} | {pos['symbol']} | {pos['type']} | "
                      f"–û–±—ä–µ–º: {pos['volume']} | –¶–µ–Ω–∞: {pos['open_price']:.5f} | "
                      f"–ü—Ä–∏–±—ã–ª—å: {profit_color} {pos['profit']:.2f}")

        print("=" * 50)
        return True

    finally:
        mt5_client.disconnect()


def stop_mode(config):
    """–†–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    global trader_instance, mt5_client

    print("üõë –ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏...")

    if trader_instance:
        trader_instance.stop_trading()
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        return True
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–π–¥–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return False


def emergency_stop_mode(config):
    """–†–µ–∂–∏–º –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    global trader_instance, mt5_client

    print("üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!")

    mt5_client = MT5Client(config)  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º MT5Client
    if not mt5_client.connect():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MT5")
        return False

    try:
        if trader_instance:
            success = trader_instance.emergency_stop()
            if success:
                print("‚úÖ –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            else:
                print("‚ö†Ô∏è –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            return success
        else:
            # –ï—Å–ª–∏ —Ç—Ä–µ–π–¥–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
            print("üîª –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
            success = mt5_client.close_all_positions()
            if success:
                print("‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
            else:
                print("‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å")
            return success

    finally:
        mt5_client.disconnect()


def test_connection(config):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5...")

    client = MT5Client(config)  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º MT5Client
    if client.connect():
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        symbol = config.get('trading', {}).get('symbol', 'EURUSDrfd')
        print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ {symbol}...")

        symbol_info = client.get_symbol_info(symbol)
        if symbol_info:
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–º–≤–æ–ª–µ:")
            print(f"   Bid: {symbol_info['bid']:.5f}")
            print(f"   Ask: {symbol_info['ask']:.5f}")
            print(f"   Point: {symbol_info['point']}")
            print(f"   Stops Level: {symbol_info['trade_stops_level']}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ")

        client.disconnect()
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='AI Trading Robot for MetaTrader 5')
    parser.add_argument('--mode', choices=['train', 'trade', 'status', 'stop', 'emergency-stop', 'test'],
                        required=True, help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
    parser.add_argument('--symbol', help='–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: EURUSDrfd)')
    parser.add_argument('--config', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')

    args = parser.parse_args()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.config:
        config = Config.load_config(args.config)
    else:
        config = Config.load_config()

    if config is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    setup_signal_handlers()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞
    symbol = args.symbol or config.get('trading', {}).get('symbol', 'EURUSDrfd')

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    try:
        if args.mode == 'train':
            train_model(config, symbol)
        elif args.mode == 'trade':
            trade_mode(config, symbol)
        elif args.mode == 'status':
            status_mode(config)
        elif args.mode == 'stop':
            stop_mode(config)
        elif args.mode == 'emergency-stop':
            emergency_stop_mode(config)
        elif args.mode == 'test':
            test_connection(config)

    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
