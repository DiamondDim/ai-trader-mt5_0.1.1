#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è AI Trading Robot
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
current_dir = os.path.dirname(os.path.abspath(__file__))
src_path = os.path.join(current_dir, 'src')
if src_path not in sys.path:
    sys.path.insert(0, src_path)

try:
    from core.mt5_client import initialize_mt5, place_order, get_symbol_info, close_all_orders
    from utils.config import load_config
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)


def test_order(symbol=None):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤...")

    if not initialize_mt5():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MT5")
        return False

    config = load_config()
    test_symbol = symbol or config['trading']['symbol']

    print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª: {test_symbol}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
    symbol_info = get_symbol_info(test_symbol)
    if not symbol_info:
        print(f"‚ùå –°–∏–º–≤–æ–ª {test_symbol} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

    print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–º–≤–æ–ª–µ:")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {symbol_info['name']}")
    print(f"   Bid: {symbol_info['bid']:.5f}")
    print(f"   Ask: {symbol_info['ask']:.5f}")
    print(f"   Spread: {symbol_info['spread']:.5f}")
    print(f"   Digits: {symbol_info['digits']}")
    print(f"   Trade allowed: {symbol_info['trade_allowed']}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º BUY –æ—Ä–¥–µ—Ä
    print(f"\nüìà –¢–µ—Å—Ç–∏—Ä—É–µ–º BUY –æ—Ä–¥–µ—Ä...")
    success_buy = place_order(
        symbol=test_symbol,
        order_type='buy',
        lot_size=0.01,
        stop_loss=0.0020,
        take_profit=0.0030
    )

    if success_buy:
        print("‚úÖ BUY –æ—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è BUY –æ—Ä–¥–µ—Ä–∞")

    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    import time
    time.sleep(2)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º SELL –æ—Ä–¥–µ—Ä
    print(f"\nüìâ –¢–µ—Å—Ç–∏—Ä—É–µ–º SELL –æ—Ä–¥–µ—Ä...")
    success_sell = place_order(
        symbol=test_symbol,
        order_type='sell',
        lot_size=0.01,
        stop_loss=0.0020,
        take_profit=0.0030
    )

    if success_sell:
        print("‚úÖ SELL –æ—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è SELL –æ—Ä–¥–µ—Ä–∞")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞
    print(f"\nüõë –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞...")
    close_success = close_all_orders(test_symbol)

    if close_success:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç—ã")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–æ–≤")

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if success_buy and success_sell and close_success:
        print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return False


def test_market_info():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä—ã–Ω–∫–µ
    """
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")

    if not initialize_mt5():
        return False

    from core.mt5_client import get_available_symbols, get_all_symbols

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤
    major_pairs = get_available_symbols()
    all_symbols = get_all_symbols()

    print(f"‚úÖ –û—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä: {len(major_pairs)}")
    print(f"‚úÖ –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(all_symbols)}")

    if major_pairs:
        print("\nüìà –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã:")
        for i, pair in enumerate(major_pairs[:10], 1):
            print(f"   {i}. {pair}")
        if len(major_pairs) > 10:
            print(f"   ... –∏ –µ—â–µ {len(major_pairs) - 10} –ø–∞—Ä")

    return True


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ AI Trading Robot')
    parser.add_argument('symbol', nargs='?', help='–°–∏–º–≤–æ–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, EURUSD)')
    parser.add_argument('--market-info', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')

    args = parser.parse_args()

    print("ü§ñ AI Trading Robot - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤")
    print("=" * 50)

    success = True

    if args.market_info:
        success = test_market_info()
    else:
        success = test_order(args.symbol)

    if success:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
