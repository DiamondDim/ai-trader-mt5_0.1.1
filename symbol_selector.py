#!/usr/bin/env python3
"""
Symbol Selector for AI Trading Robot
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ
"""

import sys
import os
import questionary
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.core.mt5_client import get_available_symbols, get_all_symbols, initialize_mt5
from src.ml.model_builder import train_model
from src.utils.config import load_config, save_config


class SymbolSelector:
    def __init__(self):
        self.config = load_config()
        self.initialize()

    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MT5 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not initialize_mt5():
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MT5")
            return False
        return True

    def select_symbol_interactive(self):
        """
        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã —Å –∫—Ä–∞—Å–∏–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
        """
        print("\nüéØ" + "=" * 60)
        print("           –í–´–ë–û–† –í–ê–õ–Æ–¢–ù–û–ô –ü–ê–†–´ –î–õ–Ø –¢–û–†–ì–û–í–õ–ò")
        print("=" * 60)

        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ MT5...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã
        major_pairs = get_available_symbols()
        all_symbols = get_all_symbols()

        if not major_pairs and not all_symbols:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –∏–∑ MT5")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MT5 –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–µ–º–æ-—Å—á–µ—Ç–∞")
            return None

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(major_pairs)} –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä –∏ {len(all_symbols)} –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤")

        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞
        choices = []

        # –¢–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)
        current_symbol = self.config['trading'].get('symbol', '')
        if current_symbol:
            choices.append(
                questionary.Separator(f"=== –¢–ï–ö–£–©–ò–ô –°–ò–ú–í–û–õ: {current_symbol} ===")
            )
            choices.append(f"üîÑ –ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π ({current_symbol})")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
        if major_pairs:
            choices.append(
                questionary.Separator("=== –û–°–ù–û–í–ù–´–ï –í–ê–õ–Æ–¢–ù–´–ï –ü–ê–†–´ ===")
            )
            for pair in major_pairs:
                icon = "üíπ" if "USD" in pair else "üí∂"
                choices.append(f"{icon} {pair}")

        # –í—Å–µ —Å–∏–º–≤–æ–ª—ã (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        if all_symbols:
            choices.append(
                questionary.Separator("=== –í–°–ï –°–ò–ú–í–û–õ–´ (–ø–µ—Ä–≤—ã–µ 50) ===")
            )
            for pair in all_symbols[:50]:
                choices.append(f"üìä {pair}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        choices.append(
            questionary.Separator("=== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ü–¶–ò–ò ===")
        )
        choices.append("üìù –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª –≤—Ä—É—á–Ω—É—é")
        choices.append("‚ùå –û—Ç–º–µ–Ω–∞")

        # –í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞
        selected = questionary.select(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:",
            choices=choices,
            style=questionary.Style([
                ('separator', 'fg:#cc5454'),
                ('question', 'bold'),
            ])
        ).ask()

        if not selected or selected == "‚ùå –û—Ç–º–µ–Ω–∞":
            return None

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
        if selected == "üìù –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª –≤—Ä—É—á–Ω—É—é":
            selected = questionary.text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, EURUSD):",
                validate=lambda text: len(text) > 0
            ).ask()
            return selected.upper() if selected else None

        elif selected.startswith("üîÑ –ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π"):
            return current_symbol

        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å —ç–º–æ–¥–∑–∏
            return selected.split(" ")[-1]

    def configure_symbol(self, symbol):
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        """
        if not symbol:
            print("‚ùå –°–∏–º–≤–æ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return False

        print(f"\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {symbol}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config['trading']['symbol'] = symbol
        self.config['model']['symbol'] = symbol

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
        symbol_type = self._detect_symbol_type(symbol)
        self._apply_symbol_specific_settings(symbol, symbol_type)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        save_config(self.config)

        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {symbol}")
        print(f"   –¢–∏–ø —Å–∏–º–≤–æ–ª–∞: {symbol_type}")
        print(f"   –õ–æ—Ç: {self.config['trading']['lot_size']}")
        print(f"   –¢–∞–π–º—Ñ—Ä–µ–π–º: {self.config['data']['timeframe']}")

        return True

    def _detect_symbol_type(self, symbol):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        symbol_upper = symbol.upper()

        if any(x in symbol_upper for x in ['EUR', 'GBP', 'AUD', 'NZD', 'USD']):
            return 'forex_major'
        elif any(x in symbol_upper for x in ['JPY', 'CHF', 'CAD']):
            return 'forex_minor'
        elif any(x in symbol_upper for x in ['XAU', 'XAG']):
            return 'metals'
        elif any(x in symbol_upper for x in ['#', '.']):
            return 'stocks'
        else:
            return 'other'

    def _apply_symbol_specific_settings(self, symbol, symbol_type):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–∏–º–≤–æ–ª–∞"""
        symbol_settings = self.config['symbol_specific'].get(symbol, {})

        if symbol_settings:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            for key, value in symbol_settings.items():
                if key in self.config['trading']:
                    self.config['trading'][key] = value
        else:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Ç–∏–ø—É —Å–∏–º–≤–æ–ª–∞
            type_settings = {
                'forex_major': {'lot_size': 0.01, 'max_spread': 2.0},
                'forex_minor': {'lot_size': 0.01, 'max_spread': 3.0},
                'metals': {'lot_size': 0.01, 'max_spread': 5.0},
                'stocks': {'lot_size': 0.1, 'max_spread': 10.0},
                'other': {'lot_size': 0.01, 'max_spread': 5.0}
            }

            settings = type_settings.get(symbol_type, type_settings['other'])
            for key, value in settings.items():
                if key in self.config['trading']:
                    self.config['trading'][key] = value

    def auto_train_symbol(self, symbol):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        """
        if not symbol:
            print("‚ùå –°–∏–º–≤–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            return False

        print(f"\nü§ñ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
        print(f"üéØ –°–∏–º–≤–æ–ª: {symbol}")
        print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("-" * 50)

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
            success = train_model(symbol)

            if success:
                print(f"\n‚úÖ –û–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {symbol}")
                print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–∞–ø–∫–µ models/")
                return True
            else:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {symbol}")
                return False

        except Exception as e:
            print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
            return False

    def run_selection_flow(self, auto_train=True):
        """
        –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º–≤–æ–ª–∞
        """
        if not self.initialize():
            return False

        # –í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞
        symbol = self.select_symbol_interactive()

        if not symbol:
            print("‚ùå –í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω")
            return False

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not self.configure_symbol(symbol):
            return False

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        if auto_train:
            return self.auto_train_symbol(symbol)
        else:
            print(f"\nüéØ –°–∏–º–≤–æ–ª {symbol} –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—É—á–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")
            print(f"üí° –î–ª—è –æ–±—É—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python main.py --mode train --symbol {symbol}")
            return True


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    """
    import argparse

    parser = argparse.ArgumentParser(description='Symbol Selector for AI Trading Robot')
    parser.add_argument('--no-train', action='store_true', help='Skip auto training after selection')

    args = parser.parse_args()

    selector = SymbolSelector()
    success = selector.run_selection_flow(auto_train=not args.no_train)

    if success:
        print("\nüéâ" + "=" * 50)
        print("          –ù–ê–°–¢–†–û–ô–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 50)
        current_symbol = selector.config['trading']['symbol']
        print(f"üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print(f"   python main.py --mode trade --symbol {current_symbol}")
    else:
        print("\n‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")


if __name__ == "__main__":
    main()
