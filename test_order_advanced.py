#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è AI Trading Robot
"""

import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
current_dir = os.path.dirname(os.path.abspath(__file__))
src_path = os.path.join(current_dir, 'src')
if src_path not in sys.path:
    sys.path.insert(0, src_path)

from core.mt5_client import initialize_mt5, place_order, get_symbol_info, close_all_orders, get_error_description
from utils.config import load_config


def test_order_advanced(symbol=None):
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
    """
    print("üß™ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤...")

    if not initialize_mt5():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MT5")
        return False

    config = load_config()
    test_symbol = symbol or config['trading']['symbol']

    print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª: {test_symbol}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
    symbol_info = get_symbol_info(test_symbol)
    if not symbol_info:
        print(f"‚ùå –°–∏–º–≤–æ–ª {test_symbol} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

    print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–º–≤–æ–ª–µ:")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {symbol_info['name']}")
    print(f"   Bid: {symbol_info['bid']:.5f}")
    print(f"   Ask: {symbol_info['ask']:.5f}")
    print(f"   Spread: {symbol_info['spread']:.5f}")
    print(f"   Digits: {symbol_info['digits']}")
    print(f"   Point: {symbol_info.get('point', 'N/A')}")
    print(f"   Trade stops level: {symbol_info.get('trade_stops_level', 'N/A')}")
    print(f"   Trade allowed: {symbol_info['trade_allowed']}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º BUY –æ—Ä–¥–µ—Ä —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    print(f"\nüìà –¢–µ—Å—Ç–∏—Ä—É–µ–º BUY –æ—Ä–¥–µ—Ä —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")

    # –¢–µ—Å—Ç 1: –ë–µ–∑ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
    print(f"\nüîπ –¢–µ—Å—Ç 1: –ë–µ–∑ SL/TP")
    success1 = place_order(
        symbol=test_symbol,
        order_type='buy',
        lot_size=0.01,
        stop_loss=0.0,
        take_profit=0.0
    )

    time.sleep(2)

    # –¢–µ—Å—Ç 2: –° —É–º–µ—Ä–µ–Ω–Ω—ã–º–∏ SL/TP
    print(f"\nüîπ –¢–µ—Å—Ç 2: –° —É–º–µ—Ä–µ–Ω–Ω—ã–º–∏ SL/TP (50/75 –ø–∏–ø—Å–æ–≤)")
    success2 = place_order(
        symbol=test_symbol,
        order_type='buy',
        lot_size=0.01,
        stop_loss=0.0050,  # 50 –ø–∏–ø—Å–æ–≤
        take_profit=0.0075  # 75 –ø–∏–ø—Å–æ–≤
    )

    time.sleep(2)

    # –¢–µ—Å—Ç 3: SELL –æ—Ä–¥–µ—Ä
    print(f"\nüîπ –¢–µ—Å—Ç 3: SELL –æ—Ä–¥–µ—Ä —Å SL/TP")
    success3 = place_order(
        symbol=test_symbol,
        order_type='sell',
        lot_size=0.01,
        stop_loss=0.0050,
        take_profit=0.0075
    )

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞
    print(f"\nüõë –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞...")
    close_success = close_all_orders(test_symbol)

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    tests_passed = sum([success1, success2, success3])
    print(f"\nüìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {tests_passed}/3")
    print(f"   ‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –æ—Ä–¥–µ—Ä–æ–≤: {'–£—Å–ø–µ—à–Ω–æ' if close_success else '–° –æ—à–∏–±–∫–∞–º–∏'}")

    if tests_passed >= 2 and close_success:
        print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print(f"\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
        return False


def test_market_conditions():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    """
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π...")

    if not initialize_mt5():
        return False

    import MetaTrader5 as mt5
    from datetime import datetime

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
    server_time = mt5.symbol_info_tick("AUDUSDrfd").time
    server_time_str = datetime.fromtimestamp(server_time).strftime('%Y-%m-%d %H:%M:%S')
    print(f"üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time_str}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
    symbols_to_check = ["AUDUSDrfd", "EURUSDrfd", "GBPUSDrfd"]

    for symbol in symbols_to_check:
        tick = mt5.symbol_info_tick(symbol)
        if tick:
            spread = tick.ask - tick.bid
            print(f"   {symbol}: Bid={tick.bid:.5f}, Ask={tick.ask:.5f}, Spread={spread:.5f}")
        else:
            print(f"   {symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    return True


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ AI Trading Robot')
    parser.add_argument('symbol', nargs='?', help='–°–∏–º–≤–æ–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, AUDUSDrfd)')
    parser.add_argument('--market', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è')

    args = parser.parse_args()

    print("ü§ñ AI Trading Robot - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤")
    print("=" * 60)

    success = True

    if args.market:
        success = test_market_conditions()
    else:
        success = test_order_advanced(args.symbol)

    if success:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
